{
    "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
    "files": {
        "ignore": ["node_modules", ".next"]
    },
    "vcs": {
        "enabled": false,
        "clientKind": "git",
        "useIgnoreFile": false
    },
    "organizeImports": {
        "enabled": false
    },
    "formatter": {
        "formatWithErrors": true,
        "indentStyle": "space",
        "indentWidth": 4,
        "lineWidth": 120
    },
    "linter": {
        "rules": {
            "recommended": true,
            "correctness": {
                "noConstantMathMinMaxClamp": "error",
                "noUndeclaredDependencies": "error",
                "noUndeclaredVariables": "error",
                "noUnusedFunctionParameters": "error",
                "noUnusedImports": "error",
                "noUnusedPrivateClassMembers": "error",
                "noUnusedVariables": "error",
                "useArrayLiterals": "error",
                "useHookAtTopLevel": "error",
                "useExhaustiveDependencies": "warn"
            },
            "suspicious": {
                "noEmptyBlockStatements": "error",
                "noImplicitAnyLet": "off", // Имеются ложные срабатывания, typescript лучше обрабатывает эти сценарии
                "useAwait": "error"
            },
            "performance": {
                "noAccumulatingSpread": "warn"
            },
            "complexity": {
                "noExcessiveCognitiveComplexity": {
                    "level": "error",
                    "options": {
                        "maxAllowedComplexity": 20
                    }
                },
                "noUselessStringConcat": "error",
                "noUselessUndefinedInitialization": "error",
                "noVoid": "error",
                "useDateNow": "error",
                "useSimplifiedLogicExpression": "error"
            },
            "nursery": {
                "noDuplicateElseIf": "error",
                "noSubstr": "error",
                "noUnknownPseudoElement": "error",
                "useConsistentCurlyBraces": "warn"
            },
            "style": {
                "noUnusedTemplateLiteral": "warn",
                "useBlockStatements": "error",
                "useCollapsedElseIf": "error",
                "useConsistentBuiltinInstantiation": "error",
                "useFilenamingConvention": {
                    "level": "error",
                    "options": {
                        "requireAscii": true,
                        "filenameCases": ["camelCase", "PascalCase", "kebab-case"]
                    }
                },
                "useForOf": "error",
                "useFragmentSyntax": "error",
                "useNamingConvention": {
                    "level": "error",
                    "options": {
                        "strictCase": false,
                        "requireAscii": true,
                        "conventions": [
                            {
                                "selector": {
                                    "kind": "enum"
                                },
                                "formats": ["CONSTANT_CASE"]
                            },
                            {
                                "selector": {
                                    "kind": "enumMember"
                                },
                                "formats": ["CONSTANT_CASE"]
                            },
                            {
                                "selector": {
                                    "kind": "typeProperty"
                                },
                                "formats": ["camelCase", "PascalCase", "snake_case"]
                            },
                            {
                                "selector": {
                                    "kind": "objectLiteralProperty"
                                },
                                "formats": ["camelCase", "PascalCase", "snake_case", "CONSTANT_CASE"]
                            }
                        ]
                    }
                },
                "useShorthandAssign": "error",
                "useSingleVarDeclarator": "off"
            },
            "a11y": {
                "noSvgWithoutTitle": "warn",
                "useKeyWithClickEvents": "off"
            }
        }
    },
    "javascript": {
        "formatter": {
            "arrowParentheses": "asNeeded",
            "quoteStyle": "single",
            "semicolons": "always"
        }
    },
    "css": {
        "parser": {
            "cssModules": true
        },
        "formatter": {
            "enabled": true
        },
        "linter": {
            "enabled": true
        }
    },
    "overrides": [
        {
            "include": ["next-env.d.ts"],
            "linter": {
                "rules": {
                    "style": {
                        "useFilenamingConvention": "off"
                    }
                }
            }
        }
    ]
}
